// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/entities/aluno_entity.dart';
import 'app/entities/curso_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6001116863544240217),
      name: 'Aluno',
      lastPropertyId: const IdUid(2, 755977760679423901),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7612974932920522446),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 755977760679423901),
            name: 'nome',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 2598832435660329122),
            name: 'cursos',
            targetId: const IdUid(2, 6342346975536318661))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6342346975536318661),
      name: 'Curso',
      lastPropertyId: const IdUid(3, 4735708287246028626),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2996112016834377701),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 439126668620594541),
            name: 'descricao',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4735708287246028626),
            name: 'ementa',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'alunos', srcEntity: 'Aluno', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6342346975536318661),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(2, 407669239854417023),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [407669239854417023],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Aluno: EntityDefinition<Aluno>(
        model: _entities[0],
        toOneRelations: (Aluno object) => [],
        toManyRelations: (Aluno object) =>
            {RelInfo<Aluno>.toMany(1, object.id): object.cursos},
        getId: (Aluno object) => object.id,
        setId: (Aluno object, int id) {
          object.id = id;
        },
        objectToFB: (Aluno object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Aluno(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nome: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo<Aluno>(
              object.cursos, store, RelInfo<Aluno>.toMany(1, object.id));
          return object;
        }),
    Curso: EntityDefinition<Curso>(
        model: _entities[1],
        toOneRelations: (Curso object) => [],
        toManyRelations: (Curso object) =>
            {RelInfo<Aluno>.toManyBacklink(1, object.id): object.alunos},
        getId: (Curso object) => object.id,
        setId: (Curso object, int id) {
          object.id = id;
        },
        objectToFB: (Curso object, fb.Builder fbb) {
          final descricaoOffset = fbb.writeString(object.descricao);
          final ementaOffset = fbb.writeString(object.ementa);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descricaoOffset);
          fbb.addOffset(2, ementaOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Curso(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              descricao: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ementa: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          InternalToManyAccess.setRelInfo<Curso>(object.alunos, store,
              RelInfo<Aluno>.toManyBacklink(1, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Aluno] entity fields to define ObjectBox queries.
class Aluno_ {
  /// see [Aluno.id]
  static final id = QueryIntegerProperty<Aluno>(_entities[0].properties[0]);

  /// see [Aluno.nome]
  static final nome = QueryStringProperty<Aluno>(_entities[0].properties[1]);

  /// see [Aluno.cursos]
  static final cursos =
      QueryRelationToMany<Aluno, Curso>(_entities[0].relations[0]);
}

/// [Curso] entity fields to define ObjectBox queries.
class Curso_ {
  /// see [Curso.id]
  static final id = QueryIntegerProperty<Curso>(_entities[1].properties[0]);

  /// see [Curso.descricao]
  static final descricao =
      QueryStringProperty<Curso>(_entities[1].properties[1]);

  /// see [Curso.ementa]
  static final ementa = QueryStringProperty<Curso>(_entities[1].properties[2]);
}
